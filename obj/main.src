; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
__x:
	DS	3
_x:
	DS	3
_y:
	DS	3
__y:
	DS	3
	SEGMENT DATA
_offset:
	DW	10
	DB	0
_xmin:
	DW	0
	DB	0
_xmax:
	DW	32
	DB	0
_ymin:
	DW	0
	DB	0
_ymax:
	DW	175
	DB	0
_treecolor:
	DW	3
	DB	0
_floorcolor:
	DW	255
	DB	0
_wallcolor:
	DW	224
	DB	0
_min_w:
	DW	10
	DB	0
_min_h:
	DW	10
	DB	0
	SEGMENT BSS
_max_w:
	DS	3
_max_h:
	DS	3
_num_rcands:
	DS	3
_room_x:
	DS	3
_room_y:
	DS	3
_room_w:
	DS	3
_room_h:
	DS	3
_count:
	DS	3
_r:
	DS	22400
_map:
	DS	21480
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:
;    4	 * Author:
;    5	 * License:
;    6	 * Description:
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	#include <math.h>
;   17	#include <stdio.h>
;   18	#include <stdlib.h>
;   19	#include <string.h>
;   20	#include <graphx.h>
;   21	#include <keypadc.h>
;   22	#include <debug.h>
;   23	
;   24	#include "structs.h"
;   25	
;   26	/* Put your function prototypes here */
;   27	void everything(void);
;   28	void mapgen(void);
;   29	void genrooms(void);
;   30	void randroom(int,int,int,int);
;   31	bool placeroom(int,int);
;   32	bool doesroomfit(int,int,int,int);
;   33	void mazeworm(void);
;   34	void drawmap(void);
;   35	
;   36	/* Put all your globals here */
;   37	int _x;
;   38	int x;
;   39	int y;
;   40	int _y;
;   41	int offset = 10;
;   42	int xmin = 0;
;   43	int xmax = 32;
;   44	int ymin = 0;
;   45	int ymax = 175;
;   46	int treecolor = 0x03;
;   47	int floorcolor = 0xFF;
;   48	int wallcolor = 0xE0;
;   49	int min_w = 10;
;   50	int min_h = 10;
;   51	int max_w;  //30 in the final
;   52	int max_h;  //50 in final
;   53	int num_rcands;
;   54	int room_x;
;   55	int room_y;
;   56	int room_w;
;   57	int room_h;
;   58	int count;
;   59	
;   60	room_t r[5600];
;   61	
;   62	int map[40][179];
	SEGMENT CODE
;   63	
;   64	void main(void) {
_main:
;   65		gfx_Begin();
	CALL	_gfx_Begin
;   66		
;   67		everything();
	CALL	_everything
;   68		
;   69	    do {
L_1:
;   70			kb_Scan();
	CALL	_kb_Scan
;   71			if (kb_Data[6] & kb_Enter){
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_2
;   72				everything();
	CALL	_everything
;   73			}
;   74		} while (!(kb_Data[6] & kb_Clear));
L_2:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_1
;   75		
;   76	    gfx_End();
	CALL	_gfx_End
;   77	}
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_everything                         IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   78	
;   79	void everything(void){
_everything:
;   80		gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   81		memset(map, 0, 7160);
	LD	BC,7160
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_map
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;   82		
;   83		/* random test
;   84		for(x=xmin;x<xmax;x++){
;   85			for(y=ymin;y<ymax;y++){
;   86				if (randInt(0,4) == 2){
;   87					map[x][y] = 1;
;   88				}
;   89			}
;   90		}
;   91		*/
;   92		
;   93		mapgen();
	CALL	_mapgen
;   94		drawmap();
	CALL	_drawmap
;   95	}
	RET	


;**************************** _everything ***************************
;Name                         Addr/Register   Size   Type
;_drawmap                            IMPORT  -----   function
;_mapgen                             IMPORT  -----   function
;_map                                STATIC  21480   variable
;_memset                             IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   96	
;   97	/* Put other functions here */
;   98	void drawmap() {
_drawmap:
;   99		for (_x=xmin;_x<xmax;_x++){
	LD	BC,(_xmin)
	LD	(__x),BC
	JR	L_17
L_15:
;  100			for (_y=ymin;_y<ymax;_y++){
	LD	BC,(_ymin)
	LD	(__y),BC
	JR	L_14
L_12:
;  101				if (map[_x][_y] == 0){
	LD	HL,(__x)
	LD	BC,537
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(__y)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__icmpzero
	JR	NZ,L_10
;  102					gfx_SetColor(wallcolor);
	LD	A,(_wallcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  103				}
L_10:
;  104				if (map[_x][_y] == 1){
	LD	HL,(__x)
	LD	BC,537
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(__y)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_11
;  105					gfx_SetColor(floorcolor);
	LD	A,(_floorcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  106				}
L_11:
;  107				gfx_SetPixel(_x+offset,_y+offset);
	LD	A,(__y)
	LD	B,A
	LD	A,(_offset)
	LD	C,A
	LD	A,B
	ADD	A,C
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_offset)
	LD	HL,(__x)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
	LD	BC,(__y)
	INC	BC
	LD	(__y),BC
;  108			}
L_14:
	LD	BC,(_ymax)
	LD	HL,(__y)
	OR	A,A
	SBC	HL,BC
	JP	M,L_12
	LD	BC,(__x)
	INC	BC
	LD	(__x),BC
;  109		}
L_17:
	LD	BC,(_xmax)
	LD	HL,(__x)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_15
;  110	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_xmax                               STATIC      3   variable
;_ymax                               STATIC      3   variable
;_offset                             STATIC      3   variable
;_gfx_SetPixel                       IMPORT  -----   function
;_floorcolor                         STATIC      3   variable
;_wallcolor                          STATIC      3   variable
;_gfx_SetColor                       IMPORT  -----   function
;_map                                STATIC  21480   variable
;__y                                 STATIC      3   variable
;_ymin                               STATIC      3   variable
;__x                                 STATIC      3   variable
;_xmin                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  111	
;  112	void mapgen() {
_mapgen:
;  113		count=0;
	LD	BC,0
	LD	(_count),BC
;  114		genrooms();
	CALL	_genrooms
;  115		//mazeworm();
;  116		//placeflags();
;  117	}
	RET	


;**************************** _mapgen ***************************
;Name                         Addr/Register   Size   Type
;_genrooms                           IMPORT  -----   function
;_count                              STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  118	
;  119	void genrooms() {
_genrooms:
	LD	HL,-6
	CALL	__frameset
;  120		int fmax=10;
	LD	BC,10
	LD	(IX+-3),BC
;  121		int rmax=30;
	LD	BC,30
	LD	(IX+-6),BC
;  122		max_w = 30;
	LD	(_max_w),BC
;  123		max_h = 50;
	LD	BC,50
	LD	(_max_h),BC
;  124		
;  125		do {
L_26:
;  126			
;  127			randroom(min_w,max_w,min_h,max_h);	
	LD	BC,(_max_h)
	PUSH	BC
	LD	BC,(_min_h)
	PUSH	BC
	LD	BC,(_max_w)
	PUSH	BC
	LD	BC,(_min_w)
	PUSH	BC
	CALL	_randroom
;  128			
;  129			count++;
	LD	BC,(_count)
	INC	BC
	LD	(_count),BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  130			gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  131			gfx_FillRectangle(150,150,80,15);
	LD	BC,15
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,150
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  132			gfx_SetTextFGColor(gfx_green);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  133			gfx_SetTextXY(150,150);
	LD	BC,150
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  134			gfx_PrintInt(count,8);
	LD	BC,8
	PUSH	BC
	LD	BC,(_count)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;  135			
;  136			if (placeroom(room_w, room_h)) {
	LD	BC,(_room_h)
	PUSH	BC
	LD	BC,(_room_w)
	PUSH	BC
	CALL	_placeroom
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_24
;  137				rmax--;
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  138			} 
;  139			else {
	JR	L_27
L_24:
;  140				fmax--;
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
;  141			}
;  142		} while (fmax > 0 && rmax > 0);
L_27:
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_28
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_26
;  143	}
L_28:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _genrooms ***************************
;Name                         Addr/Register   Size   Type
;_room_w                             STATIC      3   variable
;_room_h                             STATIC      3   variable
;_placeroom                          IMPORT  -----   function
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_count                              STATIC      3   variable
;_min_w                              STATIC      3   variable
;_min_h                              STATIC      3   variable
;_randroom                           IMPORT  -----   function
;_max_h                              STATIC      3   variable
;_max_w                              STATIC      3   variable
;rmax                                  IX-6      3   variable
;fmax                                  IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  144	
;  145	void randroom(int mn_w,int mx_w,int mn_h,int mx_h) {
_randroom:
	CALL	__frameset0
;  146		room_w = 10;
	LD	BC,10
	LD	(_room_w),BC
;  147		room_h = 10;
	LD	(_room_h),BC
;  148		//room_w = randInt(mn_w,mx_w);
;  149		//room_h = randInt(mn_h,mx_h);
;  150	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _randroom ***************************
;Name                         Addr/Register   Size   Type
;_room_h                             STATIC      3   variable
;_room_w                             STATIC      3   variable
;mx_h                                 IX+15      3   parameter
;mn_h                                 IX+12      3   parameter
;mx_w                                  IX+9      3   parameter
;mn_w                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  151	
;  152	bool placeroom(int w,int h) {
_placeroom:
	LD	HL,-45
	CALL	__frameset
;  153		int r_x;
;  154		int r_y;
;  155		int R;
;  156		int rp_x;
;  157		int rp_y;
;  158		int mx;
;  159		int my;
;  160		num_rcands = 0;
	LD	BC,0
	LD	(_num_rcands),BC
;  161		for (r_x=xmin;r_x<(xmax-w);r_x++){
	LD	BC,(_xmin)
	LD	(IX+-9),BC
	JR	L_39
L_37:
;  162			for (r_y=ymin;r_y<(ymax-h);r_y++){
	LD	BC,(_ymin)
	LD	(IX+-6),BC
	JR	L_36
L_34:
;  163				if (doesroomfit(r_x,r_y,w,h)) {
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_doesroomfit
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_35
;  164					r[num_rcands].x = r_x;
	LD	HL,(_num_rcands)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-36),HL
	LD	A,(IX+-9)
	LD	IY,(IX+-36)
	LD	(IY+0),A
;  165					r[num_rcands].y = r_y;
	LD	A,(IX+-6)
	LD	(IY+1),A
;  166					r[num_rcands].w = w;
	LD	A,(IX+6)
	LD	(IY+2),A
;  167					r[num_rcands].h = h;
	LD	A,(IX+9)
	LD	(IY+3),A
;  168					num_rcands++;
	LD	BC,(_num_rcands)
	INC	BC
	LD	(_num_rcands),BC
;  169				}
;  170			}
L_35:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_36:
	LD	HL,(_ymax)
	LD	BC,(IX+9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_34
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  171		}
L_39:
	LD	HL,(_xmax)
	LD	BC,(IX+6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_37
;  172		if (num_rcands==0){
	LD	HL,(_num_rcands)
	CALL	__icmpzero
	JR	NZ,L_42
;  173			return false;
	XOR	A,A
	JR	L_52
;  174		}
L_42:
;  175		R = randInt(0,num_rcands);
	CALL	_random
	LD	BC,(_num_rcands)
	INC	BC
	CALL	__iremu
	LD	(IX+-30),HL
;  176		for (rp_x=r[R].x;rp_x<(r[R].x+r[R].w);rp_x++){
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-21),HL
	LD	BC,_r
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	(IX+-15),HL
	JR	L_50
L_48:
;  177			for (rp_y=r[R].y;rp_y<(r[R].y+r[R].h);rp_y++){
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	HL,(IX+-12)
	LD	BC,_r
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	(IX+-18),HL
	JR	L_47
L_45:
;  178				mx=r[R].x;
	LD	BC,(IX+-3)
	LD	(IX+-24),BC
	LD	HL,(IX+-3)
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-39),HL
	LD	IY,(IX+-39)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	(IX+-33),HL
;  179				my=r[R].y;
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	(IX+-27),HL
;  180				map[mx][my]=1;
	LD	HL,(IX+-33)
	LD	BC,537
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-27)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,1
	LD	(HL),BC
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  181			}
L_47:
	LD	BC,(IX+-24)
	LD	(IX+-3),BC
	LD	(IX+-21),BC
	LD	HL,BC
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-42),HL
	LD	IY,(IX+-42)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	A,(IY+3)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_45
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  182		}
L_50:
	LD	BC,(IX+-21)
	LD	(IX+-12),BC
	LD	HL,BC
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-45),HL
	LD	IY,(IX+-45)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	A,(IY+2)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_48
;  183		return true;
	LD	A,1
;  184	}
L_52:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _placeroom ***************************
;Name                         Addr/Register   Size   Type
;_map                                STATIC  21480   variable
;_random                             IMPORT  -----   function
;_xmax                               STATIC      3   variable
;_ymax                               STATIC      3   variable
;_r                                  STATIC  22400   variable
;_doesroomfit                        IMPORT  -----   function
;_ymin                               STATIC      3   variable
;_xmin                               STATIC      3   variable
;_num_rcands                         STATIC      3   variable
;mx                                   IX-33      3   variable
;R                                    IX-30      3   variable
;my                                   IX-27      3   variable
;G_2                                  IX-24      3   variable
;G_3                                  IX-21      3   variable
;rp_y                                 IX-18      3   variable
;rp_x                                 IX-15      3   variable
;G_0                                  IX-12      3   variable
;r_x                                   IX-9      3   variable
;r_y                                   IX-6      3   variable
;G_1                                   IX-3      3   variable
;h                                     IX+9      3   parameter
;w                                     IX+6      3   parameter


; Stack Frame Size: 57 (bytes)
;       Spill Code: 0 (instruction)


;  185	
;  186	bool doesroomfit(int x,int y,int w,int h) {
_doesroomfit:
	LD	HL,-6
	CALL	__frameset
;  187		int r_x;
;  188		int r_y;
;  189		for (r_x=(x-5);r_x<x+(w+5);r_x++){
	LD	IY,(IX+6)
	LEA	IY,IY+-5
	LD	(IX+-3),IY
	JR	L_61
L_59:
;  190			for (r_y=(y-5);r_y<y+(h+5);r_y++){
	LD	IY,(IX+9)
	LEA	IY,IY+-5
	LD	(IX+-6),IY
	JR	L_58
L_56:
;  191				if (map[r_x][r_y]==1){
	LD	BC,537
	LD	HL,(IX+-3)
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_57
;  192					return false;
	XOR	A,A
	JR	L_63
;  193				}
;  194			}
L_57:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_58:
	LD	IY,(IX+15)
	LEA	HL,IY+5
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_56
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  195		}
L_61:
	LD	IY,(IX+12)
	LEA	HL,IY+5
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_59
;  196		return true;
	LD	A,1
L_63:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _doesroomfit ***************************
;Name                         Addr/Register   Size   Type
;_map                                STATIC  21480   variable
;r_y                                   IX-6      3   variable
;r_x                                   IX-3      3   variable
;h                                    IX+15      3   parameter
;w                                    IX+12      3   parameter
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _memset:ROM
	XREF _random:ROM
	XREF __imulu:ROM
	XREF __iremu:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _doesroomfit
	XDEF _placeroom
	XDEF _randroom
	XDEF _genrooms
	XDEF _mapgen
	XDEF _drawmap
	XDEF _everything
	XDEF _main
	XDEF _map
	XDEF _r
	XDEF _count
	XDEF _room_h
	XDEF _room_w
	XDEF _room_y
	XDEF _room_x
	XDEF _num_rcands
	XDEF _max_h
	XDEF _max_w
	XDEF _min_h
	XDEF _min_w
	XDEF _wallcolor
	XDEF _floorcolor
	XDEF _treecolor
	XDEF _ymax
	XDEF _ymin
	XDEF _xmax
	XDEF _xmin
	XDEF _offset
	XDEF __y
	XDEF _y
	XDEF _x
	XDEF __x
	END

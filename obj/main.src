; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
__x:
	DS	3
__y:
	DS	3
	SEGMENT DATA
_offset:
	DW	10
	DB	0
_xmin:
	DW	0
	DB	0
_xmax:
	DW	30
	DB	0
_ymin:
	DW	0
	DB	0
_ymax:
	DW	20
	DB	0
_treecolor:
	DW	3
	DB	0
_floorcolor:
	DW	255
	DB	0
_wallcolor:
	DW	224
	DB	0
_min_w:
	DW	3
	DB	0
_min_h:
	DW	3
	DB	0
_max_w:
	DW	10
	DB	0
_max_h:
	DW	10
	DB	0
	SEGMENT BSS
_num_rcands:
	DS	3
_room_x:
	DS	3
_room_y:
	DS	3
_room_w:
	DS	3
_room_h:
	DS	3
_r:
	DS	7200
_map:
	DS	1800
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:
;    4	 * Author:
;    5	 * License:
;    6	 * Description:
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	#include <math.h>
;   17	#include <stdio.h>
;   18	#include <stdlib.h>
;   19	#include <string.h>
;   20	#include <graphx.h>
;   21	#include <keypadc.h>
;   22	#include <debug.h>
;   23	
;   24	#include "structs.h"
;   25	
;   26	/* Put your function prototypes here */
;   27	void mapgen(void);
;   28	void genrooms(void);
;   29	void randroom(int,int,int,int);
;   30	bool placeroom(int,int);
;   31	bool doesroomfit(int,int,int,int);
;   32	void mazeworm(void);
;   33	void drawmap(void);
;   34	
;   35	/* Put all your globals here */
;   36	int _x;
;   37	int _y;
;   38	int offset = 10;
;   39	int xmin = 0;
;   40	int xmax = 30;
;   41	int ymin = 0;
;   42	int ymax = 20;
;   43	int treecolor = 0x03;
;   44	int floorcolor = 0xFF;
;   45	int wallcolor = 0xE0;
;   46	int min_w = 3;
;   47	int min_h = 3;
;   48	int max_w=10;
;   49	int max_h=10;
;   50	int num_rcands;
;   51	int room_x;
;   52	int room_y;
;   53	int room_w;
;   54	int room_h;
;   55	
;   56	room_t r[600];
;   57	
;   58	int map[30][20];
	SEGMENT CODE
;   59	
;   60	void main(void) {
_main:
;   61		gfx_Begin();
	CALL	_gfx_Begin
;   62		
;   63		mapgen();
	CALL	_mapgen
;   64		drawmap();
	CALL	_drawmap
;   65		
;   66	    do {
L_0:
;   67			kb_Scan();
	CALL	_kb_Scan
;   68		} while (!(kb_Data[6] & kb_Clear));
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_0
;   69		
;   70	    gfx_End();
	CALL	_gfx_End
;   71	}
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_drawmap                            IMPORT  -----   function
;_mapgen                             IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   72	
;   73	/* Put other functions here */
;   74	void drawmap() {
_drawmap:
	LD	HL,-6
	CALL	__frameset
;   75		gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   76		for (_x=xmin;_x<xmax;_x++){
	LD	BC,(_xmin)
	LD	(__x),BC
	JR	L_15
L_13:
;   77			for (_y=ymin;_y<ymax;_y++){
	LD	BC,(_ymin)
	LD	(__y),BC
	JR	L_12
L_10:
;   78				if (map[_x][_y] == 1){
	LD	HL,(__x)
	LD	A,60
	CALL	__imul_b
	LD	BC,_map
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(__y)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	HL,(HL)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_8
;   79					gfx_SetColor(wallcolor);
	LD	A,(_wallcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   80				}
;   81				else if (map[_x][_y] == 0){
	JR	L_9
L_8:
	LD	HL,(IX+-3)
	LD	HL,(HL)
	CALL	__icmpzero
	JR	NZ,L_9
;   82					gfx_SetColor(floorcolor);
	LD	A,(_floorcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   83				}
L_9:
;   84				gfx_SetTextXY((_x*8)+offset,(_y*8)+offset);
	LD	HL,(__y)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_offset)
	ADD	HL,BC
	PUSH	HL
	LD	HL,(__x)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_offset)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   85				gfx_PrintStringXY("o",(_x*8)+offset,(_y*8)+offset);
	LD	HL,(__y)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_offset)
	ADD	HL,BC
	PUSH	HL
	LD	HL,(__x)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(_offset)
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(__y)
	INC	BC
	LD	(__y),BC
;   86			}
L_12:
	LD	BC,(_ymax)
	LD	HL,(__y)
	OR	A,A
	SBC	HL,BC
	JP	M,L_10
	LD	BC,(__x)
	INC	BC
	LD	(__x),BC
;   87		}
L_15:
	LD	BC,(_xmax)
	LD	HL,(__x)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_13
;   88	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_xmax                               STATIC      3   variable
;_ymax                               STATIC      3   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_offset                             STATIC      3   variable
;_gfx_SetTextXY                      IMPORT  -----   function
;_floorcolor                         STATIC      3   variable
;_wallcolor                          STATIC      3   variable
;_gfx_SetColor                       IMPORT  -----   function
;_map                                STATIC   1800   variable
;__y                                 STATIC      3   variable
;_ymin                               STATIC      3   variable
;__x                                 STATIC      3   variable
;_xmin                               STATIC      3   variable
;_gfx_FillScreen                     IMPORT  -----   function
;G_0                                   IX-6      3   variable
;G_1                                   IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__4:
	DB	"o"
	DB	0
	SEGMENT CODE
;   89	
;   90	void mapgen() {
_mapgen:
;   91		genrooms();
	CALL	_genrooms
;   92		//mazeworm();
;   93		//placeflags();
;   94	}
	RET	


;**************************** _mapgen ***************************
;Name                         Addr/Register   Size   Type
;_genrooms                           IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   95	
;   96	void genrooms() {
_genrooms:
	LD	HL,-6
	CALL	__frameset
;   97		int fmax=10;
	LD	BC,10
	LD	(IX+-3),BC
;   98		int rmax=10;
	LD	(IX+-6),BC
;   99		max_w = 10;
	LD	(_max_w),BC
;  100		max_h = 10;
	LD	(_max_h),BC
;  101		randroom(min_w,max_w,min_h,max_h);
	PUSH	BC
	LD	BC,(_min_h)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(_min_w)
	PUSH	BC
	CALL	_randroom
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  102		do {
L_23:
;  103			if (placeroom(room_w, room_h)) {
	LD	BC,(_room_h)
	PUSH	BC
	LD	BC,(_room_w)
	PUSH	BC
	CALL	_placeroom
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_21
;  104				rmax--;
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  105			} 
;  106			else {
	JR	L_24
L_21:
;  107				fmax--;
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
;  108			}
;  109		} while (fmax > 0 || rmax > 0);
L_24:
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_23
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_23
;  110	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _genrooms ***************************
;Name                         Addr/Register   Size   Type
;_room_w                             STATIC      3   variable
;_room_h                             STATIC      3   variable
;_placeroom                          IMPORT  -----   function
;_min_w                              STATIC      3   variable
;_min_h                              STATIC      3   variable
;_randroom                           IMPORT  -----   function
;_max_h                              STATIC      3   variable
;_max_w                              STATIC      3   variable
;rmax                                  IX-6      3   variable
;fmax                                  IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  111	
;  112	void randroom(int mn_w,int mx_w,int mn_h,int mx_h) {
_randroom:
	LD	HL,-6
	CALL	__frameset
;  113		room_w = randInt(mn_w,mx_w);
	CALL	_random
	LD	(IX+-3),HL
	LD	HL,(IX+9)
	LD	BC,(IX+6)
	LD	DE,(IX+6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	INC	BC
	CALL	__iremu
	ADD	HL,DE
	LD	(_room_w),HL
;  114		room_h = randInt(mn_h,mx_h);
	CALL	_random
	LD	(IX+-6),HL
	LD	HL,(IX+15)
	LD	BC,(IX+12)
	LD	DE,(IX+12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	INC	BC
	CALL	__iremu
	ADD	HL,DE
	LD	(_room_h),HL
;  115	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _randroom ***************************
;Name                         Addr/Register   Size   Type
;_room_h                             STATIC      3   variable
;_room_w                             STATIC      3   variable
;_random                             IMPORT  -----   function
;mx_h                                 IX+15      3   parameter
;mn_h                                 IX+12      3   parameter
;mx_w                                  IX+9      3   parameter
;mn_w                                  IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


;  116	
;  117	bool placeroom(int w,int h) {
_placeroom:
	LD	HL,-45
	CALL	__frameset
;  118		int r_x;
;  119		int r_y;
;  120		int R;
;  121		int rp_x;
;  122		int rp_y;
;  123		int mx;
;  124		int my;
;  125		num_rcands = 0;
	LD	BC,0
	LD	(_num_rcands),BC
;  126		for (r_x=xmin;r_x<(xmax-w);r_x++){
	LD	BC,(_xmin)
	LD	(IX+-9),BC
	JR	L_36
L_34:
;  127			for (r_y=ymin;r_y<(ymax-h);r_y++){
	LD	BC,(_ymin)
	LD	(IX+-6),BC
	JR	L_33
L_31:
;  128				if (doesroomfit(r_x,r_y,w,h)) {
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_doesroomfit
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_32
;  129					r[num_rcands].x=r_x;
	LD	HL,(_num_rcands)
	LD	A,12
	CALL	__imul_b
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-36),HL
	LD	BC,(IX+-9)
	LD	IY,(IX+-36)
	LD	(IY+0),BC
;  130					r[num_rcands].y=r_y;
	LD	BC,(IX+-6)
	LD	(IY+3),BC
;  131					r[num_rcands].w=w;
	LD	BC,(IX+6)
	LD	(IY+6),BC
;  132					r[num_rcands].h=h;
	LD	BC,(IX+9)
	LD	(IY+9),BC
;  133					num_rcands++;
	LD	BC,(_num_rcands)
	INC	BC
	LD	(_num_rcands),BC
;  134				}
;  135			}
L_32:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_33:
	LD	HL,(_ymax)
	LD	BC,(IX+9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_31
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  136		}
L_36:
	LD	HL,(_xmax)
	LD	BC,(IX+6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_34
;  137		if (num_rcands==0){
	LD	HL,(_num_rcands)
	CALL	__icmpzero
	JR	NZ,L_39
;  138			return false;
	XOR	A,A
	JR	L_49
;  139		}
L_39:
;  140		R=randInt(0,num_rcands);
	CALL	_random
	LD	BC,(_num_rcands)
	INC	BC
	CALL	__iremu
	LD	(IX+-30),HL
;  141		for (rp_x=r[R].x;rp_x<(r[R].x+r[R].w);rp_x++){
	LD	A,12
	CALL	__imul_b
	LD	(IX+-21),HL
	LD	BC,_r
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+0)
	LD	(IX+-15),BC
	JR	L_47
L_45:
;  142			for (rp_y=r[R].y;rp_y<(r[R].y+r[R].h);rp_y++){
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	HL,(IX+-12)
	LD	BC,_r
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+3)
	LD	(IX+-18),BC
	JR	L_44
L_42:
;  143				mx=r[R].x;
	LD	BC,(IX+-3)
	LD	(IX+-24),BC
	LD	HL,(IX+-3)
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-39),HL
	LD	IY,(IX+-39)
	LD	BC,(IY+0)
	LD	(IX+-33),BC
;  144				my=r[R].y;
	LD	BC,(IY+3)
	LD	(IX+-27),BC
;  145				map[mx][my]=0;
	LD	HL,(IX+-33)
	LD	A,60
	CALL	__imul_b
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-27)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,0
	LD	(HL),BC
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  146			}
L_44:
	LD	BC,(IX+-24)
	LD	(IX+-3),BC
	LD	(IX+-21),BC
	LD	HL,BC
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-42),HL
	LD	IY,(IX+-42)
	LD	BC,(IY+9)
	LD	HL,(IY+3)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_42
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  147		}
L_47:
	LD	BC,(IX+-21)
	LD	(IX+-12),BC
	LD	HL,BC
	LD	BC,_r
	ADD	HL,BC
	LD	(IX+-45),HL
	LD	IY,(IX+-45)
	LD	BC,(IY+6)
	LD	HL,(IY+0)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_45
;  148		return true;
	LD	A,1
;  149	}
L_49:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _placeroom ***************************
;Name                         Addr/Register   Size   Type
;_map                                STATIC   1800   variable
;_random                             IMPORT  -----   function
;_xmax                               STATIC      3   variable
;_ymax                               STATIC      3   variable
;_r                                  STATIC   7200   variable
;_doesroomfit                        IMPORT  -----   function
;_ymin                               STATIC      3   variable
;_xmin                               STATIC      3   variable
;_num_rcands                         STATIC      3   variable
;mx                                   IX-33      3   variable
;R                                    IX-30      3   variable
;my                                   IX-27      3   variable
;G_4                                  IX-24      3   variable
;G_5                                  IX-21      3   variable
;rp_y                                 IX-18      3   variable
;rp_x                                 IX-15      3   variable
;G_2                                  IX-12      3   variable
;r_x                                   IX-9      3   variable
;r_y                                   IX-6      3   variable
;G_3                                   IX-3      3   variable
;h                                     IX+9      3   parameter
;w                                     IX+6      3   parameter


; Stack Frame Size: 57 (bytes)
;       Spill Code: 0 (instruction)


;  150	
;  151	bool doesroomfit(int x,int y,int w,int h) {
_doesroomfit:
	LD	HL,-6
	CALL	__frameset
;  152		int r_x;
;  153		int r_y;
;  154		for (r_x=(x-1);r_x<x+(w+1);r_x++){
	LD	BC,(IX+6)
	DEC	BC
	LD	(IX+-3),BC
	JR	L_63
L_61:
;  155			for (r_y=(y-1);r_y<y+(h+1);r_y++){
	LD	BC,(IX+9)
	DEC	BC
	LD	(IX+-6),BC
	JR	L_60
L_58:
;  156				if (map[r_x][r_y]==0){
	LD	HL,(IX+-3)
	LD	A,60
	CALL	__imul_b
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__icmpzero
	JR	NZ,L_59
;  157					if (w>=h) {
	LD	BC,(IX+15)
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_55
;  158						max_w--;
	LD	BC,(_max_w)
	DEC	BC
	LD	(_max_w),BC
;  159					}
;  160					else {
	JR	L_56
L_55:
;  161						max_h--;
	LD	BC,(_max_h)
	DEC	BC
	LD	(_max_h),BC
;  162					}
L_56:
;  163					return false;
	XOR	A,A
	JR	L_65
;  164				}
;  165			}
L_59:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_60:
	LD	HL,(IX+15)
	INC	HL
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_58
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  166		}
L_63:
	LD	HL,(IX+12)
	INC	HL
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_61
;  167		return true;
	LD	A,1
L_65:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _doesroomfit ***************************
;Name                         Addr/Register   Size   Type
;_max_h                              STATIC      3   variable
;_max_w                              STATIC      3   variable
;_map                                STATIC   1800   variable
;r_y                                   IX-6      3   variable
;r_x                                   IX-3      3   variable
;h                                    IX+15      3   parameter
;w                                    IX+12      3   parameter
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _random:ROM
	XREF __iremu:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _doesroomfit
	XDEF _placeroom
	XDEF _randroom
	XDEF _genrooms
	XDEF _mapgen
	XDEF _drawmap
	XDEF _main
	XDEF _map
	XDEF _r
	XDEF _room_h
	XDEF _room_w
	XDEF _room_y
	XDEF _room_x
	XDEF _num_rcands
	XDEF _max_h
	XDEF _max_w
	XDEF _min_h
	XDEF _min_w
	XDEF _wallcolor
	XDEF _floorcolor
	XDEF _treecolor
	XDEF _ymax
	XDEF _ymin
	XDEF _xmax
	XDEF _xmin
	XDEF _offset
	XDEF __y
	XDEF __x
	END

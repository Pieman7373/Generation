; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_wallcolor:
	DW	224
	DB	0
_floorcolor:
	DW	39
	DB	0
_startx:
	DW	20
	DB	0
_starty:
	DW	10
	DB	0
_bsize:
	DW	4
	DB	0
	SEGMENT BSS
_map:
	DS	19200
	SEGMENT DATA
_mapw:
	DW	80
	DB	0
_maph:
	DW	80
	DB	0
	SEGMENT BSS
_mapx:
	DS	3
_mapy:
	DS	3
	SEGMENT DATA
_minside:
	DW	5
	DB	0
_maxside:
	DW	20
	DB	0
_maxarea:
	DW	100
	DB	0
	SEGMENT BSS
_roomx:
	DS	3
_roomy:
	DS	3
_roomw:
	DS	3
_roomh:
	DS	3
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:
;    4	 * Author:
;    5	 * License:
;    6	 * Description:
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	#include <math.h>
;   17	#include <stdio.h>
;   18	#include <stdlib.h>
;   19	#include <string.h>
;   20	#include <graphx.h>
;   21	#include <keypadc.h>
;   22	#include <debug.h>
;   23	
;   24	#include "structs.h"
;   25	
;   26	
;   27	
;   28	
;   29	
;   30	/* Put your function prototypes here */
;   31	void everything(void);
;   32	void drawmap(void);
;   33	void resetmap(int);
;   34	void genroom(void);
;   35	void randroom();
;   36	bool doesroomfit(int,int,int,int);
;   37	bool placeroom(int,int);
;   38	
;   39	
;   40	/* Put all your globals here */
;   41	
;   42	//colors
;   43	int wallcolor = 0xE0;
;   44	int floorcolor = 0x27;
;   45	
;   46	//drawnmap
;   47	int startx = 20; //20
;   48	int starty = 10; //10
;   49	int bsize = 4; //5
;   50	
;   51	//map data
;   52	int map[80][80];
;   53	int mapw = 80;
;   54	int maph = 80;
;   55	int mapx;
;   56	int mapy;
;   57	
;   58	//room variables
;   59	int minside = 5; //3
;   60	int maxside = 20; //15
;   61	int maxarea = 100;
;   62	int roomx;
;   63	int roomy;
;   64	int roomw;
;   65	int roomh;
	SEGMENT CODE
;   66	
;   67	
;   68	
;   69	/*RAND THING
;   70	
;   71		rand() % (max_number + 1 - minimum_number) + minimum_number
;   72	
;   73	*/
;   74	
;   75	void main(void) {
_main:
;   76		gfx_Begin();
	CALL	_gfx_Begin
;   77		gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   78	    do {
L_1:
;   79			kb_Scan();
	CALL	_kb_Scan
;   80			if (kb_Data[6] & kb_Enter){
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_2
;   81				gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   82				resetmap(0);
	LD	BC,0
	PUSH	BC
	CALL	_resetmap
	POP	BC
;   83				everything();
	CALL	_everything
;   84			}
;   85		} while (!(kb_Data[6] & kb_Clear));
L_2:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_1
;   86		
;   87	    gfx_End();
	CALL	_gfx_End
;   88	}
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_everything                         IMPORT  -----   function
;_resetmap                           IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   89	
;   90	
;   91	void everything() {	
_everything:
;   92		
;   93		genroom();
	CALL	_genroom
;   94		drawmap();
	CALL	_drawmap
;   95		
;   96	}
	RET	


;**************************** _everything ***************************
;Name                         Addr/Register   Size   Type
;_drawmap                            IMPORT  -----   function
;_genroom                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   97	
;   98	void drawmap() {
_drawmap:
;   99		for( mapx=0; mapx<mapw; mapx++){
	LD	BC,0
	LD	(_mapx),BC
	JR	L_17
L_15:
;  100			for( mapy=0; mapy<maph; mapy++){
	LD	BC,0
	LD	(_mapy),BC
	JR	L_14
L_12:
;  101				
;  102				switch (map[mapx][mapy]){
	LD	HL,(_mapx)
	LD	A,240
	CALL	__imul_b
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(_mapy)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__case8
L__4:
	DW	2
	DB	0
	DW24	L_8	

	DB	1
	DW24	L_9	

	DW24	L_10	

;  103					case 0:
L_8:
;  104						gfx_SetColor(wallcolor);
	LD	A,(_wallcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  105						break;
	JR	L_11
;  106					case 1:
L_9:
;  107						gfx_SetColor(floorcolor);
	LD	A,(_floorcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  108						break;
	JR	L_11
;  109					default:
L_10:
;  110						gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  111						break;
;  112				}
L_11:
;  113			
;  114				gfx_FillRectangle((startx+(bsize*mapx)),(starty+(bsize*mapy)),bsize,bsize);
	LD	HL,(_bsize)
	LD	BC,(_mapy)
	CALL	__imuls
	LD	BC,(_bsize)
	PUSH	BC
	LD	BC,(_mapx)
	LD	DE,(_bsize)
	PUSH	DE
	LD	DE,(_starty)
	ADD	HL,DE
	PUSH	HL
	LD	HL,(_bsize)
	CALL	__imuls
	LD	BC,(_startx)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_mapy)
	INC	BC
	LD	(_mapy),BC
;  115				
;  116				
;  117				/* GRID VISUALIZATION
;  118				gfx_SetColor(0x74);
;  119				gfx_Rectangle((startx+(bsize*mapx)),(starty+(bsize*mapy)),bsize,bsize);
;  120				*/
;  121			}
L_14:
	LD	BC,(_maph)
	LD	HL,(_mapy)
	OR	A,A
	SBC	HL,BC
	JP	M,L_12
	LD	BC,(_mapx)
	INC	BC
	LD	(_mapx),BC
;  122		}
L_17:
	LD	BC,(_mapw)
	LD	HL,(_mapx)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_15
;  123	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_mapw                               STATIC      3   variable
;_maph                               STATIC      3   variable
;_startx                             STATIC      3   variable
;_starty                             STATIC      3   variable
;_bsize                              STATIC      3   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_floorcolor                         STATIC      3   variable
;_wallcolor                          STATIC      3   variable
;_gfx_SetColor                       IMPORT  -----   function
;_map                                STATIC  19200   variable
;_mapy                               STATIC      3   variable
;_mapx                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  124	
;  125	void genroom() {
_genroom:
	LD	HL,-3
	CALL	__frameset
;  126	int rmax = 15;
	LD	BC,15
	LD	(IX+-3),BC
;  127		
;  128		do { //make rooms until max is reached
L_20:
;  129		
;  130			//picks random room size
;  131			randroom();
	CALL	_randroom
;  132		
;  133			//checks if room fits or is intersecting any other room, then places	
;  134			if (placeroom(roomw,roomh)) {
	LD	BC,(_roomh)
	PUSH	BC
	LD	BC,(_roomw)
	PUSH	BC
	CALL	_placeroom
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_21
;  135				rmax-=1;
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
;  136			}
;  137			
;  138		} while (rmax);
L_21:
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	NZ,L_20
;  139	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _genroom ***************************
;Name                         Addr/Register   Size   Type
;_roomw                              STATIC      3   variable
;_roomh                              STATIC      3   variable
;_placeroom                          IMPORT  -----   function
;_randroom                           IMPORT  -----   function
;rmax                                  IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  140	
;  141	void randroom(){
_randroom:
	LD	HL,-6
	CALL	__frameset
;  142		//get new number  if below minimum
;  143		//do {
;  144		//	roomw = (rand() % maxside+1);
;  145		//} while (roomw<minside);
;  146		roomw = randInt(minside,maxside);
	CALL	_random
	LD	(IX+-3),HL
	LD	HL,(_maxside)
	LD	BC,(_minside)
	LD	DE,(_minside)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	INC	BC
	CALL	__iremu
	ADD	HL,DE
	LD	(_roomw),HL
;  147		
;  148		//get new number if below minimum
;  149		//do {
;  150		//	roomh = (rand() % maxside+1);
;  151		//} while (roomh<minside);
;  152		roomh = randInt(minside,maxside);
	CALL	_random
	LD	(IX+-6),HL
	LD	HL,(_maxside)
	LD	BC,(_minside)
	LD	DE,(_minside)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	INC	BC
	CALL	__iremu
	ADD	HL,DE
	LD	(_roomh),HL
;  153	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _randroom ***************************
;Name                         Addr/Register   Size   Type
;_roomh                              STATIC      3   variable
;_roomw                              STATIC      3   variable
;_minside                            STATIC      3   variable
;_maxside                            STATIC      3   variable
;_random                             IMPORT  -----   function


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  154	
;  155	
;  156	
;  157	bool placeroom(width,height){
_placeroom:
	LD	HL,-15
	CALL	__frameset
;  158		int countx;
;  159		int county;
;  160		int placex;
;  161		int placey;
;  162		int fmax = 10;
	LD	BC,10
	LD	(IX+-15),BC
;  163		
;  164		/* Random Room Coords*/
;  165		//do {
;  166		//	placex = (rand() % 48);
;  167		//} while ((placex+width>=mapw-1) || (placex == 0));
;  168		placex = randInt(1, mapw-width);
	CALL	_random
	LD	DE,HL
	LD	HL,(_mapw)
	LD	BC,(IX+6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__iremu
	INC	HL
	LD	(IX+-9),HL
;  169		
;  170		//do {
;  171		//	placey = (rand() % 48);
;  172		//} while ((placey+height>=maph-1) || (placey == 0));
;  173		placey = randInt(1, maph-height);
	CALL	_random
	LD	DE,HL
	LD	HL,(_maph)
	LD	BC,(IX+9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__iremu
	INC	HL
	LD	(IX+-12),HL
;  174		
;  175		do {
L_38:
;  176			if (doesroomfit(placex,placey,width,height)){  //check if room fits
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_doesroomfit
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_34
;  177				/*write room to map*/
;  178				for( countx = placex; countx < placex+width; countx++){
	LD	BC,(IX+-9)
	LD	(IX+-3),BC
	JR	L_31
L_29:
;  179					for( county = placey; county < placey+height; county++){
	LD	BC,(IX+-12)
	LD	(IX+-6),BC
	JR	L_28
L_26:
;  180						map[countx][county] = 1;
	LD	HL,(IX+-3)
	LD	A,240
	CALL	__imul_b
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,1
	LD	(HL),BC
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  181					}
L_28:
	LD	BC,(IX+9)
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_26
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  182				}
L_31:
	LD	BC,(IX+6)
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_29
;  183				return true;
	LD	A,1
	JR	L_41
;  184			}
L_34:
;  185			                         // if room doesn't fit, decrease size
;  186			fmax-=1;
	LD	BC,(IX+-15)
	DEC	BC
	LD	(IX+-15),BC
;  187			if (width > maxside) {
	LD	BC,(IX+6)
	LD	HL,(_maxside)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_37
;  188				width-=1;
	LD	BC,(IX+6)
	DEC	BC
	LD	(IX+6),BC
;  189			}
L_37:
;  190			if (height > maxside) {
	LD	BC,(IX+9)
	LD	HL,(_maxside)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_39
;  191				height-=1;
	LD	BC,(IX+9)
	DEC	BC
	LD	(IX+9),BC
;  192			}
;  193	
;  194				
;  195		} while (fmax);
L_39:
	LD	HL,(IX+-15)
	CALL	__icmpzero
	JR	NZ,L_38
;  196		
;  197		return false;              //after some failed tries, it falls through
	XOR	A,A
;  198		
;  199	}
L_41:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _placeroom ***************************
;Name                         Addr/Register   Size   Type
;_maxside                            STATIC      3   variable
;_map                                STATIC  19200   variable
;_doesroomfit                        IMPORT  -----   function
;_maph                               STATIC      3   variable
;_mapw                               STATIC      3   variable
;_random                             IMPORT  -----   function
;fmax                                 IX-15      3   variable
;placey                               IX-12      3   variable
;placex                                IX-9      3   variable
;county                                IX-6      3   variable
;countx                                IX-3      3   variable
;height                                IX+9      3   parameter
;width                                 IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


;  200	
;  201	bool doesroomfit(x,y,w,h){
_doesroomfit:
	LD	HL,-6
	CALL	__frameset
;  202		int checkx;
;  203		int checky;
;  204			
;  205			for (checkx = x-1; checkx <= x+w+1; checkx++){
	LD	BC,(IX+6)
	DEC	BC
	LD	(IX+-3),BC
	JR	L_50
L_48:
;  206				for (checky = y-1; checky <= y+h+1; checky++){
	LD	BC,(IX+9)
	DEC	BC
	LD	(IX+-6),BC
	JR	L_47
L_45:
;  207					if (map[checkx][checky]!=0) {
	LD	HL,(IX+-3)
	LD	A,240
	CALL	__imul_b
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__icmpzero
	JR	Z,L_46
;  208						return false;
	XOR	A,A
	JR	L_52
;  209					}
;  210				}
L_46:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_47:
	LD	BC,(IX+15)
	LD	HL,(IX+9)
	ADD	HL,BC
	INC	HL
	OR	A,A
	LD	BC,(IX+-6)
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_45
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  211			}
L_50:
	LD	BC,(IX+12)
	LD	HL,(IX+6)
	ADD	HL,BC
	INC	HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_48
;  212			
;  213		return true;
	LD	A,1
;  214	}
L_52:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _doesroomfit ***************************
;Name                         Addr/Register   Size   Type
;_map                                STATIC  19200   variable
;checky                                IX-6      3   variable
;checkx                                IX-3      3   variable
;h                                    IX+15      3   parameter
;w                                    IX+12      3   parameter
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


;  215	
;  216	void resetmap(value){
_resetmap:
	CALL	__frameset0
;  217		for( mapx=0; mapx<mapw; mapx++){
	LD	BC,0
	LD	(_mapx),BC
	JR	L_60
L_58:
;  218			for( mapy=0; mapy<maph; mapy++){
	LD	BC,0
	LD	(_mapy),BC
	JR	L_57
L_55:
;  219				map[mapx][mapy] = value;
	LD	HL,(_mapx)
	LD	A,240
	CALL	__imul_b
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(_mapy)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	(HL),BC
	LD	BC,(_mapy)
	INC	BC
	LD	(_mapy),BC
;  220			}
L_57:
	LD	BC,(_maph)
	LD	HL,(_mapy)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_55
	LD	BC,(_mapx)
	INC	BC
	LD	(_mapx),BC
;  221		}
L_60:
	LD	BC,(_mapw)
	LD	HL,(_mapx)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_58
;  222	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _resetmap ***************************
;Name                         Addr/Register   Size   Type
;_mapw                               STATIC      3   variable
;_maph                               STATIC      3   variable
;_map                                STATIC  19200   variable
;_mapy                               STATIC      3   variable
;_mapx                               STATIC      3   variable
;value                                 IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _random:ROM
	XREF __imuls:ROM
	XREF __iremu:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _resetmap
	XDEF _doesroomfit
	XDEF _placeroom
	XDEF _randroom
	XDEF _genroom
	XDEF _drawmap
	XDEF _everything
	XDEF _main
	XDEF _roomh
	XDEF _roomw
	XDEF _roomy
	XDEF _roomx
	XDEF _maxarea
	XDEF _maxside
	XDEF _minside
	XDEF _mapy
	XDEF _mapx
	XDEF _maph
	XDEF _mapw
	XDEF _map
	XDEF _bsize
	XDEF _starty
	XDEF _startx
	XDEF _floorcolor
	XDEF _wallcolor
	END

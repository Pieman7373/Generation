; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_wallcolor:
	DW	224
	DB	0
_floorcolor:
	DW	39
	DB	0
_startx:
	DW	20
	DB	0
_starty:
	DW	10
	DB	0
_bsize:
	DW	2
	DB	0
	SEGMENT BSS
_map:
	DS	30000
	SEGMENT DATA
_mapw:
	DW	100
	DB	0
_maph:
	DW	100
	DB	0
	SEGMENT BSS
_mapx:
	DS	3
_mapy:
	DS	3
	SEGMENT DATA
_minw:
	DW	5
	DB	0
_minh:
	DW	5
	DB	0
_maxw:
	DW	30
	DB	0
_maxh:
	DW	30
	DB	0
	SEGMENT BSS
_roomx:
	DS	3
_roomy:
	DS	3
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:
;    4	 * Author:
;    5	 * License:
;    6	 * Description:
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	#include <math.h>
;   17	#include <stdio.h>
;   18	#include <stdlib.h>
;   19	#include <string.h>
;   20	#include <graphx.h>
;   21	#include <keypadc.h>
;   22	#include <debug.h>
;   23	
;   24	#include "structs.h"
;   25	
;   26	
;   27	
;   28	
;   29	
;   30	/* Put your function prototypes here */
;   31	void everything(void);
;   32	void drawmap(void);
;   33	void resetmap(int);
;   34	void genroom(void);
;   35	//void randroom();
;   36	bool doesroomfit(int,int,int,int);
;   37	bool placeroom(int,int);
;   38	
;   39	
;   40	/* Put all your globals here */
;   41	
;   42	//colors
;   43	int wallcolor = 0xE0;
;   44	int floorcolor = 0x27;
;   45	
;   46	//drawnmap
;   47	int startx = 20; //20
;   48	int starty = 10; //10
;   49	int bsize = 2; //5
;   50	
;   51	//map da	ta
;   52	int map[100][100];
;   53	int mapw = 100;
;   54	int maph = 100;
;   55	int mapx;
;   56	int mapy;
;   57	
;   58	//room variables
;   59	int minw = 5; //3
;   60	int minh = 5;
;   61	int maxw = 30; //15
;   62	int maxh = 30;
;   63	int roomx;
;   64	int roomy;
	SEGMENT CODE
;   65	
;   66	/*RAND THING
;   67	
;   68		rand() % (max_number + 1 - minimum_number) + minimum_number
;   69	
;   70	*/
;   71	
;   72	void main(void) {
_main:
;   73		gfx_Begin();
	CALL	_gfx_Begin
;   74		gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   75	    do {
L_1:
;   76			kb_Scan();
	CALL	_kb_Scan
;   77			if (kb_Data[6] & kb_Enter){
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_2
;   78				gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   79				resetmap(0);
	LD	BC,0
	PUSH	BC
	CALL	_resetmap
	POP	BC
;   80				everything();
	CALL	_everything
;   81			}
;   82		} while (!(kb_Data[6] & kb_Clear));
L_2:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_1
;   83		
;   84	    gfx_End();
	CALL	_gfx_End
;   85	}
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_everything                         IMPORT  -----   function
;_resetmap                           IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   86	
;   87	
;   88	void everything() {	
_everything:
;   89		
;   90		genroom();
	CALL	_genroom
;   91		drawmap();
	CALL	_drawmap
;   92		
;   93	}
	RET	


;**************************** _everything ***************************
;Name                         Addr/Register   Size   Type
;_drawmap                            IMPORT  -----   function
;_genroom                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   94	
;   95	void drawmap() {
_drawmap:
;   96		for( mapx=0; mapx<mapw; mapx++){
	LD	BC,0
	LD	(_mapx),BC
	JR	L_17
L_15:
;   97			for( mapy=0; mapy<maph; mapy++){
	LD	BC,0
	LD	(_mapy),BC
	JR	L_14
L_12:
;   98				
;   99				switch (map[mapx][mapy]){
	LD	HL,(_mapx)
	LD	BC,300
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(_mapy)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__case8
L__4:
	DW	2
	DB	0
	DW24	L_8	

	DB	1
	DW24	L_9	

	DW24	L_10	

;  100					case 0:
L_8:
;  101						gfx_SetColor(wallcolor);
	LD	A,(_wallcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  102						break;
	JR	L_11
;  103					case 1:
L_9:
;  104						gfx_SetColor(floorcolor);
	LD	A,(_floorcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  105						break;
	JR	L_11
;  106					default:
L_10:
;  107						gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  108						break;
;  109				}
L_11:
;  110			
;  111				gfx_FillRectangle((startx+(bsize*mapx)),(starty+(bsize*mapy)),bsize,bsize);
	LD	HL,(_bsize)
	LD	BC,(_mapy)
	CALL	__imuls
	LD	BC,(_bsize)
	PUSH	BC
	LD	BC,(_mapx)
	LD	DE,(_bsize)
	PUSH	DE
	LD	DE,(_starty)
	ADD	HL,DE
	PUSH	HL
	LD	HL,(_bsize)
	CALL	__imuls
	LD	BC,(_startx)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_mapy)
	INC	BC
	LD	(_mapy),BC
;  112				
;  113				
;  114				/* GRID VISUALIZATION
;  115				gfx_SetColor(0x74);
;  116				gfx_Rectangle((startx+(bsize*mapx)),(starty+(bsize*mapy)),bsize,bsize);
;  117				*/
;  118			}
L_14:
	LD	BC,(_maph)
	LD	HL,(_mapy)
	OR	A,A
	SBC	HL,BC
	JP	M,L_12
	LD	BC,(_mapx)
	INC	BC
	LD	(_mapx),BC
;  119		}
L_17:
	LD	BC,(_mapw)
	LD	HL,(_mapx)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_15
;  120	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_mapw                               STATIC      3   variable
;_maph                               STATIC      3   variable
;_startx                             STATIC      3   variable
;_starty                             STATIC      3   variable
;_bsize                              STATIC      3   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_floorcolor                         STATIC      3   variable
;_wallcolor                          STATIC      3   variable
;_gfx_SetColor                       IMPORT  -----   function
;_map                                STATIC  30000   variable
;_mapy                               STATIC      3   variable
;_mapx                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  121	
;  122	void genroom() {
_genroom:
	LD	HL,-12
	CALL	__frameset
;  123	int rmax = 25;
	LD	BC,25
	LD	(IX+-3),BC
;  124	
;  125		
;  126		do { //make rooms until max is reached
L_20:
;  127		
;  128			//checks if room fits or is intersecting any other room, then places	
;  129			//randroom integrated into placeroom function call
;  130			if (placeroom(randInt(minw,maxw),randInt(minh,maxh))) {
	CALL	_random
	LD	DE,HL
	LD	HL,(_maxh)
	LD	BC,(_minh)
	LD	(IX+-6),BC	; spill
	LD	BC,(_minh)
	LD	(IX+-12),BC	; spill
	LD	BC,(IX+-6)	; unspill
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	INC	BC
	CALL	__iremu
	LD	BC,(IX+-12)	; unspill
	ADD	HL,BC
	PUSH	HL
	CALL	_random
	LD	DE,HL
	LD	HL,(_maxw)
	LD	BC,(_minw)
	LD	(IX+-6),BC	; spill
	LD	BC,(_minw)
	LD	(IX+-9),BC	; spill
	LD	BC,(IX+-6)	; unspill
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	INC	BC
	CALL	__iremu
	LD	BC,(IX+-9)	; unspill
	ADD	HL,BC
	PUSH	HL
	CALL	_placeroom
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_21
;  131				rmax-=1;
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
;  132			}
;  133			
;  134		} while (rmax);
L_21:
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	NZ,L_20
;  135	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _genroom ***************************
;Name                         Addr/Register   Size   Type
;_minw                               STATIC      3   variable
;_maxw                               STATIC      3   variable
;_minh                               STATIC      3   variable
;_maxh                               STATIC      3   variable
;_random                             IMPORT  -----   function
;_placeroom                          IMPORT  -----   function
;rmax                                  IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  136	
;  137	/*
;  138	void randroom(){
;  139		//get new number  if below minimum
;  140		//do {
;  141		//	roomw = (rand() % maxside+1);
;  142		//} while (roomw<minside);
;  143		roomw = randInt(minw,maxw);
;  144		
;  145		//get new number if below minimum
;  146		//do {
;  147		//	roomh = (rand() % maxside+1);
;  148		//} while (roomh<minside);
;  149		roomh = randInt(minw,maxw);
;  150	}
;  151	*/
;  152	
;  153	
;  154	bool placeroom(width,height){
_placeroom:
	LD	HL,-15
	CALL	__frameset
;  155		int countx;
;  156		int county;
;  157		int placex;
;  158		int placey;
;  159		int fmax = 10;
	LD	BC,10
	LD	(IX+-15),BC
;  160		
;  161		/* Random Room Coords*/
;  162		placex = randInt(1, mapw-width-1);
	CALL	_random
	LD	DE,HL
	LD	HL,(_mapw)
	LD	BC,(IX+6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	DEC	BC
	CALL	__iremu
	INC	HL
	LD	(IX+-9),HL
;  163		placey = randInt(1, maph-height-1);
	CALL	_random
	LD	DE,HL
	LD	HL,(_maph)
	LD	BC,(IX+9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,DE
	DEC	BC
	CALL	__iremu
	INC	HL
	LD	(IX+-12),HL
;  164		
;  165		
;  166		do {
L_39:
;  167			if (doesroomfit(placex,placey,width,height)){  //check if room fits
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_doesroomfit
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_33
;  168				/*write room to map*/
;  169				for( countx = placex; countx < placex+width; countx++){
	LD	BC,(IX+-9)
	LD	(IX+-3),BC
	JR	L_30
L_28:
;  170					for( county = placey; county < placey+height; county++){
	LD	BC,(IX+-12)
	LD	(IX+-6),BC
	JR	L_27
L_25:
;  171						map[countx][county] = 1;
	LD	BC,300
	LD	HL,(IX+-3)
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,1
	LD	(HL),BC
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  172					}
L_27:
	LD	BC,(IX+9)
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_25
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  173				}
L_30:
	LD	BC,(IX+6)
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_28
;  174				return true;
	LD	A,1
	JR	L_42
;  175			}
L_33:
;  176			                         // if room doesn't fit, decrease size
;  177			
;  178			fmax-=1;
	LD	BC,(IX+-15)
	DEC	BC
	LD	(IX+-15),BC
;  179			
;  180			switch randInt(0,1){
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__case8
L__14:
	DW	2
	DB	0
	DW24	L_34	

	DB	1
	DW24	L_36	

	DW24	L_40	

;  181				case 0: 
L_34:
;  182					if (width > maxw) {
	LD	BC,(IX+6)
	LD	HL,(_maxw)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_36
;  183						width-=1;
	LD	BC,(IX+6)
	DEC	BC
	LD	(IX+6),BC
;  184					}
;  185				case 1:
L_36:
;  186					if (height > maxh) {
	LD	BC,(IX+9)
	LD	HL,(_maxh)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_40
;  187						height-=1;
	LD	BC,(IX+9)
	DEC	BC
	LD	(IX+9),BC
;  188					}
;  189			}
;  190	
;  191				
;  192		} while (fmax);
L_40:
	LD	HL,(IX+-15)
	CALL	__icmpzero
	JR	NZ,L_39
;  193		
;  194		return false;              //after some failed tries, it falls through
	XOR	A,A
;  195		
;  196	}
L_42:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _placeroom ***************************
;Name                         Addr/Register   Size   Type
;_maxh                               STATIC      3   variable
;_maxw                               STATIC      3   variable
;_map                                STATIC  30000   variable
;_doesroomfit                        IMPORT  -----   function
;_maph                               STATIC      3   variable
;_mapw                               STATIC      3   variable
;_random                             IMPORT  -----   function
;fmax                                 IX-15      3   variable
;placey                               IX-12      3   variable
;placex                                IX-9      3   variable
;county                                IX-6      3   variable
;countx                                IX-3      3   variable
;height                                IX+9      3   parameter
;width                                 IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


;  197	
;  198	bool doesroomfit(x,y,w,h){
_doesroomfit:
	LD	HL,-6
	CALL	__frameset
;  199		int checkx;
;  200		int checky;
;  201			
;  202			for (checkx = x-1; checkx <= x+w+1; checkx++){
	LD	BC,(IX+6)
	DEC	BC
	LD	(IX+-3),BC
	JR	L_51
L_49:
;  203				for (checky = y-1; checky <= y+h+1; checky++){
	LD	BC,(IX+9)
	DEC	BC
	LD	(IX+-6),BC
	JR	L_48
L_46:
;  204					if (map[checkx][checky]!=0) {
	LD	BC,300
	LD	HL,(IX+-3)
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__icmpzero
	JR	Z,L_47
;  205						return false;
	XOR	A,A
	JR	L_53
;  206					}
;  207				}
L_47:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_48:
	LD	BC,(IX+15)
	LD	HL,(IX+9)
	ADD	HL,BC
	INC	HL
	OR	A,A
	LD	BC,(IX+-6)
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_46
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  208			}
L_51:
	LD	BC,(IX+12)
	LD	HL,(IX+6)
	ADD	HL,BC
	INC	HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_49
;  209			
;  210		return true;
	LD	A,1
;  211	}
L_53:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _doesroomfit ***************************
;Name                         Addr/Register   Size   Type
;_map                                STATIC  30000   variable
;checky                                IX-6      3   variable
;checkx                                IX-3      3   variable
;h                                    IX+15      3   parameter
;w                                    IX+12      3   parameter
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


;  212	
;  213	void resetmap(value){
_resetmap:
	CALL	__frameset0
;  214		for( mapx=0; mapx<mapw; mapx++){
	LD	BC,0
	LD	(_mapx),BC
	JR	L_61
L_59:
;  215			for( mapy=0; mapy<maph; mapy++){
	LD	BC,0
	LD	(_mapy),BC
	JR	L_58
L_56:
;  216				map[mapx][mapy] = value;
	LD	HL,(_mapx)
	LD	BC,300
	CALL	__imulu
	LD	BC,_map
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(_mapy)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	(HL),BC
	LD	BC,(_mapy)
	INC	BC
	LD	(_mapy),BC
;  217			}
L_58:
	LD	BC,(_maph)
	LD	HL,(_mapy)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_56
	LD	BC,(_mapx)
	INC	BC
	LD	(_mapx),BC
;  218		}
L_61:
	LD	BC,(_mapw)
	LD	HL,(_mapx)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_59
;  219	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _resetmap ***************************
;Name                         Addr/Register   Size   Type
;_mapw                               STATIC      3   variable
;_maph                               STATIC      3   variable
;_map                                STATIC  30000   variable
;_mapy                               STATIC      3   variable
;_mapx                               STATIC      3   variable
;value                                 IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _random:ROM
	XREF __imuls:ROM
	XREF __imulu:ROM
	XREF __iremu:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XDEF _resetmap
	XDEF _doesroomfit
	XDEF _placeroom
	XDEF _genroom
	XDEF _drawmap
	XDEF _everything
	XDEF _main
	XDEF _roomy
	XDEF _roomx
	XDEF _maxh
	XDEF _maxw
	XDEF _minh
	XDEF _minw
	XDEF _mapy
	XDEF _mapx
	XDEF _maph
	XDEF _mapw
	XDEF _map
	XDEF _bsize
	XDEF _starty
	XDEF _startx
	XDEF _floorcolor
	XDEF _wallcolor
	END
